{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,4BAA2B;AAE3B,MAAM,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AAElC;IAIC;QACC,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,GAAG;YACf,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,WAAW;YACtB,OAAO,EAAE,SAAS;SAClB,CAAA;IACF,CAAC;IAED;;;;OAIG;IACI,SAAS,CAAC,IAAY,EAAE,MAAc;QAC5C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAA;IAC7B,CAAC;IAED;;;;OAIG;IACI,eAAe,CAAC,UAAkB;QAGxC,MAAM,IAAI,GAAG,IAAI,CAAA;QACjB,MAAM,CAAC,EAAE,CAAC,IAAI,CACb,EAAE,CAAC,KAAK,EAAE,EACV,EAAE,CAAC,OAAO,CAAC,UAAS,IAAY;YAC/B,EAAE,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;gBACd,MAAM,CAAA;YACP,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAA;QAC3D,CAAC,CAAC,CACF,CAAA;IACF,CAAC;IAED;;;;OAIG;IACI,gBAAgB,CAAC,IAAY,EAAE,OAAe;QACpD,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;QAClC,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAC3E,MAAM,CAAC,GAAG,MAAM,GAAG,MAAM,IAAI,OAAO,IAAI,CAAA;IACzC,CAAC;IAEO,kBAAkB;QACzB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;IAC9D,CAAC;CAED;AA3DD,oCA2DC","file":"index.js","sourcesContent":["import * as _ from 'lodash'\n\nconst es = require('event-stream')\n\nexport class StreamLogger {\n\n\tprivate prefixes: { [name: string]: string }\n\n\tpublic constructor() {\n\t\t// Set up some default loggers\n\t\tthis.prefixes = {\n\t\t\t'info': '[Info]',\n\t\t\t'warn': '[Warn]',\n\t\t\t'error': '[Error]',\n\t\t\t'success': '[Success]',\n\t\t\t'debug': '[Debug]'\n\t\t}\n\t}\n\n\t/**\n\t * addPrefix\n\t *\tadd a prefix to the internal prefix object,\n\t *\twhich can then be used to create through streams\n\t */\n\tpublic addPrefix(name: string, prefix: string) {\n\t\tthis.prefixes[name] = prefix\n\t}\n\n\t/**\n\t * getLogStream\n\t *\tget a stream that when logged to will split up the info by lines,\n\t *\tapply a prefix, and forward it on.\n\t */\n\tpublic createLogStream(prefixName: string)\n\t\t: NodeJS.ReadWriteStream {\n\n\t\tconst self = this\n\t\treturn es.pipe(\n\t\t\tes.split(),\n\t\t\tes.through(function(data: string) {\n\t\t\t\tif (data == '')\n\t\t\t\t\treturn\n\t\t\t\tthis.emit('data', self.formatWithPrefix(prefixName, data))\n\t\t\t})\n\t\t)\n\t}\n\n\t/**\n\t * formatWithPrefix\n\t *\tFormat a string to send through the stream. This can be used\n\t *\tstandalone for special situations.\n\t */\n\tpublic formatWithPrefix(name: string, message: string): string {\n\t\tconst maxLength = this.getMaxPrefixLength()\n\t\tconst prefix = this.prefixes[name]\n\t\tconst spaces = _.times(maxLength - prefix.length, _.constant(' ')).join('')\n\t\treturn `${prefix}${spaces} ${message}\\n`\n\t}\n\n\tprivate getMaxPrefixLength(): number {\n\t\treturn _.max(_.map(this.prefixes, (prefix) => prefix.length))\n\t}\n\n}\n"],"sourceRoot":"src"}